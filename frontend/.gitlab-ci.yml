variables:
  USER_PROJECT: "onlineshop"
  IMAGE_VERSION: "${CI_REGISTRY}/${USER_PROJECT}/${CI_PROJECT_NAME}:${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}"
  CODECLIMATE_REPORT: "codeclimate_analysis_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"
  SNYK_REPORT: "snyk_scan_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"
  TRIVYFS_REPORT: "trivyfs_scan_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"
  TRIVY_IMAGE_REPORT: "security_scan_image_${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_COMMIT_SHORT_SHA}_report"

stages:
  - build
  - test_source_code
  - security_scan_image
  - push
  - deploy

build:
  stage: build
  variables:
    GIT_STRATEGY: clone
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_VERSION .
  tags:
    - online-shop-runner-build-shell
  only:
    - tags

codeclimate:
  stage: test_source_code
  variables:
    GIT_STRATEGY: none
  script:
    - docker run --tty --rm --env CODECLIMATE_CODE=$PWD --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze -f html > "$CODECLIMATE_REPORT.html"
    - ls -alh
  tags:
    - online-shop-runner-build-shell
  only:
    - tags
  artifacts:
    paths:
      - $CODECLIMATE_REPORT.html
    expire_in: 1 day

snyk:
  stage: test_source_code
  variables:
    GIT_STRATEGY: clone
  script:
    - snyk test --json | snyk-to-html -o $SNYK_REPORT.html || true
    - ls -alh
  tags:
    - online-shop-runner-build-shell
  only:
    - tags
  artifacts:
    paths:
      - $SNYK_REPORT.html
    expire_in: 1 day

trivyfs_scan:
  stage: test_source_code
  variables:
    GIT_STRATEGY: clone
  script:
    - docker run --rm -v $PWD:/${CI_PROJECT_NAME} -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy fs /${CI_PROJECT_NAME} --severity HIGH,CRITICAL --format template --template "@contrib/html.tpl" --output /${CI_PROJECT_NAME}/$TRIVYFS_REPORT.html
  tags:
    - online-shop-runner-build-shell
  only:
    - tags
  artifacts:
    paths:
      - $TRIVYFS_REPORT.html
    expire_in: 1 day

trivy_scan_image:
  stage: security_scan_image
  variables:
    GIT_STRATEGY: none
  script:
    - docker run --rm -v $(pwd):/${CI_PROJECT_NAME} -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy clean --all
    - docker run --rm -v $(pwd):/${CI_PROJECT_NAME} -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy image --format template --template "@contrib/html.tpl" --output /${CI_PROJECT_NAME}/${TRIVY_IMAGE_REPORT}.html $IMAGE_VERSION
  tags:
    - online-shop-runner-build-shell
  only:
    - tags
  artifacts:
    paths:
      - ${TRIVY_IMAGE_REPORT}.html
    expire_in: 1 day

push:
  stage: push
  variables:
    GIT_STRATEGY: none
  when: manual
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker push $IMAGE_VERSION
  after_script:
    - docker logout $CI_REGISTRY
  tags:
    - online-shop-runner-build-shell
  only:
    - tags

deploy:
  stage: deploy
  variables:
    GIT_STRATEGY: none
  when: manual
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $IMAGE_VERSION
    - sudo su ${USER_PROJECT} -c "docker rm -f ${CI_PROJECT_NAME}; docker run --name $CI_PROJECT_NAME -dp $FE_PORT $IMAGE_VERSION"
  after_script:
    - docker logout $CI_REGISTRY
  tags:
    - online-shop-runner-dev-shell
  only:
    - tags
